TITLE: Shell-model project for Nuclear Talent course
AUTHOR: European Center for Theoretical Studies in Nuclear Physics and Related Areas, Trento, Italy, 3-21 July, 2017
DATE: Today

===== Introduction =====


The aim of this project is to study a simple pairing model and thereafter construct a shell-model program which finds the eigenvalues.
The model is simple enough that closed-form solutions can be found, allowing thereby for useful tests of shell-model codes or other
numerical approaches to Schroedinger's equation. 

In this project we will thus work with a simplified Hamiltonian consisting of a one-body operator and a so-called 
 pairing interaction term. It is a model which to a large extent mimicks some central features of
atomic nuclei, certain atoms and systems which exhibit superfluiditity or superconductivity.  
Pairing plays a central role in nuclear physics, in particular, for identical particles it makes up large fractions of the correlations among particles. The partial wave $^{1}S_0$ of the nucleon-nucleon force plays a central role in setting up pairing correlations in nuclei. Without this particular partial wave, the $J=0$ ground state spin assignment for many nuclei with even numbers of particles would not be possible. 


We define first the Hamiltonian, with a definition of the model space and
the single-particle basis. Thereafter, we present the various exercises.

The Hamiltonian acting in the complete Hilbert space (usually infinite
dimensional) consists of an unperturbed one-body part, $\hat{H}_0$,
and a perturbation $\hat{H}_I$. 

We limit ourselves to at most two-body interactions, our Hamiltonian  is 
then represented by the following operators

!bt
\begin{equation}
\hat{H} = \hat{H}_0 +\hat{H}_I=\sum_{pq}\langle p |h_0|q\rangle a_{p}^{\dagger}a_{q} +\frac{1}{4}\sum_{pqrs}\langle pq| V|rs\rangle a_{p}^{\dagger}a_{q}^{\dagger}a_{s}a_{r},
label{eq:hamiltonian}
\end{equation}
!et
where $a_{p}^{\dagger}$ and $a_{q}$ etc. are standard fermion creation and annihilation operators, respectively,
and $pqrs$ represent all possible single-particle quantum numbers. 
The full single-particle space is defined by the completeness relation
$\hat{_1_} = \sum_{p =1}^{\infty}|p \rangle \langle p|$.
In our calculations  we will let  the single-particle states $|p\rangle$
be eigenfunctions of  the one-particle operator $\hat{h}_0$. 


The above Hamiltonian 
acts in turn on various many-body Slater determinants constructed from the single-basis defined by the one-body
operator $\hat{h}_0$.    

Our specific model consists of only $2$ doubly-degenerate and equally spaced
single-particle levels labeled by $p=1,2,\dots$ and spin $\sigma=\pm
1$.  
In Eq. (ref{eq:hamiltonian}) the labels $pqrs$ could also include spin $\sigma$. From now and for the rest of this project, labels like $pqrs$ represent the states without spin. The spin quantum numbers need to be accounted for explicitely.

We write
the Hamiltonian as

!bt
\begin{equation*} \hat{H} = \hat{H}_0 +\hat{H}_I=\hat{H}_0 + \hat{V} , \end{equation*}
!et
where

!bt
\begin{equation*}
\hat{H}_0=\xi\sum_{p\sigma}(p-1)a_{p\sigma}^{\dagger}a_{p\sigma}.
\end{equation*}
!et
Here, $H_0$ is the unperturbed Hamiltonian with a spacing between
successive single-particle states given by $\xi$, which we will set to
a constant value $\xi=1$ without loss of generality.

The two-body
operator $\hat{V}$ has one term only. It represents the
pairing contribution and carries a constant strength $g$
and is  given by

!bt
\begin{equation*}
\langle q+q-| V|s+s-\rangle  = -g  
\end{equation*}
!et
where $g$ is a constant. The above labeling means that for a  general matrix elements
$\langle pq| V|rs\rangle$ we require that the states $p$ and $q$ (and $r$ and $s$) have the same number 
quantum number $q$ but opposite spins. The two spins values are
$\sigma = \pm 1$.  
_Note: you need to figure out how to make the two-body interaction antisymmetric._
The variables $\sigma=\pm$ represent the two possible spin values. The 
interaction can only couple pairs and excites therefore only two
particles at the time.


In our model we have kept both the interaction strength and the single-particle level as constants.
In a realistic system like the atomic  nucleus this is not the case. 



The   unperturbed Hamiltonian  $\hat{H}_0$ and $\hat{V}$ both commute
with  the spin projection $\hat{S}_z$ and the total spin
$\hat{S}^2$.
This is an important feature of our system that allows us to block-diagonalize
the full Hamiltonian. In this project we will focus only on total spin $S=0$, this case is normally called the no-broken pair case. 

=== Paper and pencil gym while the wait for more serious stuff ===
Show that the
unperturbed Hamiltonian  $\hat{H}_0$ and $\hat{V}$ commute
with both the spin projection $\hat{S}_z$ and the total spin
$\hat{S}^2$, given by

!bt
\begin{equation*}
  \hat{S}_z := \frac{1}{2}\sum_{p\sigma} \sigma a^\dag_{p\sigma}a_{p\sigma}
\end{equation*}
!et
and

!bt
\begin{equation*}
  \hat{S}^2 := \hat{S}_z^2 + \frac{1}{2}(\hat{S}_+\hat{S}_- +
  \hat{S}_-\hat{S}_+),
\end{equation*}
!et
where

!bt
\begin{equation*}
  \hat{S}_\pm := \sum_{p} a^\dag_{p\pm} a_{p\mp}.
\end{equation*}
!et

This is an important feature of our system that allows us to block-diagonalize
the full Hamiltonian. We will focus on total spin $S=0$.
In this case, it is convenient to define the so-called pair creation and pair
annihilation operators

!bt
\begin{equation*}
\hat{P}^{+}_p = a^\dag_{p+}a^\dag_{p-},
\end{equation*}
!et
and

!bt
\begin{equation*}
\hat{P}^{-}_p = a_{p-}a_{p+},
\end{equation*}
!et 
respectively.

The Hamiltonian (with $\xi=1$) we will use can be written as

!bt
\begin{equation*}
\hat{H}=\sum_{p\sigma}(p-1)a_{p\sigma}^{\dagger}a_{p\sigma}
-g\sum_{pq}\hat{P}^{+}_p\hat{P}^{-}_q.
\end{equation*}
!et
Show  that Hamiltonian commutes with the product of the pair creation and annihilation operators.
This model corresponds to a system with no broken pairs. This means that the Hamiltonian can only link two-particle states in so-called spin-reversed states. 


=== Simpler case ===
Assume now that the effective Hilbert space consists only of the two lowest single-particle states and that we have two particles only.
Set up the possible two-particle configurations when we have only two single-particle states, that is $p=1$ and $p=2$. 
Construct thereafter the Hamiltonian matrix using second quantization and for example Wick's theorem 
for a system with no broken pairs and spin $S=0$ (with projection $S_z=0$) for the case of the two lowest single-particle levels  and two particles only.  This gives you a
 $2\times 2$ matrix to be diagonalized. 

Find the eigenvalues by diagonalizing the Hamiltonian matrix.
Vary your results for selected values of $g\in [-1,1]$ and comment your results.

=== Setting up the Hamiltonian matrix ===
Construct thereafter the Hamiltonian matrix for a system with no broken pairs and spin $S=0$ for the case of the four lowest single-particle levels. Our system consists of four particles only.
Our single-particle space consists of only the four lowest levels 
$p=1,2,3,4$.  You need to set up all possible Slater determinants and the Hamiltonian matrix using second quantization and
find all eigenvalues by diagonalizing the Hamiltonian matrix.
Vary your results for values of $g\in [-1,1]$.  Your Hamiltonian matrix is a $6\times 6$ matrix. 
These results will serve as a benchmark for the construction  of our shell-model program. 
We  refer to this as the exact results. Comment the behavior of the ground state as function of $g$. 

=== Diagonalizing the Hamiltonian matrix ===
Our next step is to develop a code which sets up the above Hamiltonian matrices for two and four particles in 2 and 4 single-particles states (the same as what you did in exercises b) and c) and obtain the eigenvalues.
To achieve this you should

* Decide whether you want to read from file the single-particle data and the matrix elements in $m$-scheme, or set them up internally in your code. The latter is the simplest possibility for the pairing model, whereas the first option gives you a more general code which can be extended to more realistic cases. The final oral project could thus be an extension of this program.

* Based on the single-particle basis, write a function which sets up all possible Slater determinants which have total $M=0$.  Test that this function  reproduces the cases in b) and c). If you make this function more general, it can then be reused for say a shell-model calculation of $sd$-shell nuclei.

* Use the Slater determinant basis from the previous step to set up the Hamiltonian matrix.

* With the Hamiltonian matrix, you can finally diagonalize the matrix and obtain the final eigenvalues and test against the results of b) and c).


Codes to diagonalize in C++ or Fortran can be provided. For Python, numpy contains eigenvalue solvers based on for example Householder's and Givens' algorithms.   These are topics which can we discuss separately. The lecture slides contain a rather detailed recipe
on how to construct a Slater determinant basis and how to set up the Hamiltonian matrix to diagonalize.

=== Further benchmarks ===
In developing the code it also useful to test against cases which have closed-form solutions. One obvious case is that of removing the 
two-body interaction. Then we have only the single-particle energies.
For the case of degenerete single-particle orbits, that is one value of total single-particle angular momentum only $j$, with degeneracy $\Omega=2j+1$, one can show that the ground state energy $E_0$ is with $n$ particles

!bt
\begin{equation*}
E_0= -\frac{g}{4}n\left(\Omega-n+2\right).
\end{equation*}
!et

Enlarge now your system to six and eight fermions and to $p=6$ and $p=8$ single-particle states, respectively. Run your program for a degenerate single-particle state with degeneracy $\Omega$ and test
against the exact result for the ground state. Introduce thereafter a finite single-particle spacing and study the results as you vary $g$,  as done in b) and c). Comment your results. 


The way we will set up the Slater determinants here follows a simple odometric recipe. The way it is done in more professional codes, is to use bitwise manipulations. If this is of interest, this project could form the basis for the development of a more advanced code
to be presented at the final oral exam. Another alternative is to study algorithms for exact solutions of the pairing model with many fermions. This could also form the basis for the final oral presentation.  


This project consists of at least two possible paths. The first three points below aim at performing shell-model studies of the oxygen isotopes using standard
effective interactions (provided by us) using the $1s0d$ shell as the model space.  If on the other hand you wish to continue with the pairing model from the project, the last two points may allow for that.
The aim of this project is mainly to extend the code you developed under the project in order to be able to study more realistic problems or continue your studies of the simple pairing model. In both cases you can quickly come into situations where the matrix is too large to store.  You will also need to consider a bit representation and manipulation of Slater determinants and to implement 
the Lanczos algorithm. 



  * For the shell-model part you need now to read in your data from file, both the single-particle states and the effective interaction. At the end of this file, you will find the USDB ($1s0d$-shell effective interaction, see refeence 1 for more background literature).  If you have not done so, rewrite your code from the project so that you can read in this interaction.

  * For the oxygen isotopes you can actually use your previous program and perform shell-model calculations of the oxygen isotopes using the $1s0d$ shell. Your results should agree with those obtained using Alex Brown's code Nushellx. Compute the spectra of the 3-4 lowest lying states of the oxygen isotopes from $^{18}$O to $^{28}$O and compare with data and the Alex Brown's results.

  * The code we wrote in the project  was however not very efficient, unless you already implemented the bit representation. As an optional challenge, you may now wish to consider the inclusion of a bit representation along the lines discussed in the lecture slides, and inserted below here as well.  Reference 2, included in the project material may be useful as well. Note that this part may quickly become time consuming.

  * As an alternative to all of the above, you may wish to continue your studies of the pairing model. You should then extend the program from the project  in order to be able to deal with broken pairs as well. Since you found that your Hamiltonian commutes with the pair creation operators and the spin operators, you can block-diagonalize your matrix in blocks with zero broken pairs (so-called seniority zero), one broken pair (seniority two), two broken pairs etc.  Perform now shell-model calculations for the pairing model by including also one and two broken pairs. How does the ground state evolve (no broken pairs) compared with the lowest-lying state with one broken pair? How would you define the pairing gap?

  * As an extension to the last point, you may consider relating the results from the previous point to ongoing literature on so-called exact pairing, see for example the third reference below.





======= Bit representation =======

In the build-up of a shell model code that is meant to tackle large dimensionalities
is the action of the Hamiltonian $\hat{H}$ on a 
Slater determinant represented in second quantization as

!bt
\begin{equation*}
\vert \alpha_1\dots \alpha_n\rangle = a_{\alpha_1}^\dagger a_{\alpha_2}^\dagger \dots a_{\alpha_n}^\dagger \vert 0\rangle.
\end{equation*}
!et
The time consuming part stems from the action of the Hamiltonian
on the above determinant,

!bt
\begin{equation*}
\left(\sum_{\alpha\beta} \langle \alpha\vert \hat{t}+\hat{u}\vert \beta\rangle a_\alpha^\dagger a_\beta + \frac{1}{4} \sum_{\alpha\beta\gamma\delta}
\langle\alpha \beta\vert \hat{V}\vert \gamma \delta\rangle a_\alpha^\dagger a_\beta^\dagger a_\delta a_\gamma\right)a_{\alpha_1}^\dagger a_{\alpha_2}^\dagger \dots a_{\alpha_n}^\dagger \vert 0\rangle.
\end{equation*}
!et
A practically useful way to implement this action is to encode a Slater determinant as a bit pattern. 
Assume that we have at our disposal $n$ different single-particle orbits
$\alpha_0,\alpha_2,\dots,\alpha_{n-1}$ and that we can distribute  among these orbits $N\le n$ particles.

A Slater  determinant can then be coded as an integer of $n$ bits. As an example, if we have $n=16$ single-particle states
$\alpha_0,\alpha_1,\dots,\alpha_{15}$ and $N=4$ fermions occupying the states $\alpha_3$, $\alpha_6$, $\alpha_{10}$ and $\alpha_{13}$
we could write this Slater determinant as

!bt
\begin{equation*}
\Phi_{\Lambda} = a_{\alpha_3}^\dagger a_{\alpha_6}^\dagger a_{\alpha_{10}}^\dagger a_{\alpha_{13}}^\dagger \vert 0 \rangle .
\end{equation*}
!et
The unoccupied single-particle states have bit value $0$ while the occupied ones are represented by bit state $1$. 
In the binary notation we would write this   16 bits long integer as

!bt
\begin{equation*}
\begin{array}{cccccccccccccccc}
{\alpha_0}&{\alpha_1}&{\alpha_2}&{\alpha_3}&{\alpha_4}&{\alpha_5}&{\alpha_6}&{\alpha_7} & {\alpha_8} &{\alpha_9} & {\alpha_{10}} &{\alpha_{11}} &{\alpha_{12}} &{\alpha_{13}} &{\alpha_{14}} & {\alpha_{15}} \\
{0} & {0} &{0} &{1} &{0} &{0} &{1} &{0} &{0} &{0} &{1} &{0} &{0} &{1} &{0} & {0} \\
\end{array}
\end{equation*}
!et
which translates into the decimal number

!bt
\begin{equation*}
2^3+2^6+2^{10}+2^{13}=9288.
\end{equation*}
!et
We can thus encode a Slater determinant as a bit pattern.
With $N$ particles that can be distributed over $n$ single-particle states, the total number of Slater determinats (and defining thereby the dimensionality of the system) is

!bt
\begin{equation*}
\mathrm{dim}(\mathcal{H}) = \left(\begin{array}{c} n \\N\end{array}\right).
\end{equation*}
!et
The total number of bit patterns is $2^n$. 
We assume again that we have at our disposal $n$ different single-particle orbits
$\alpha_0,\alpha_2,\dots,\alpha_{n-1}$ and that we can distribute  among these orbits $N\le n$ particles.
The ordering among these states is important as it defines the order of the creation operators.
We will write the determinant

!bt
\begin{equation*}
\Phi_{\Lambda} = a_{\alpha_3}^\dagger a_{\alpha_6}^\dagger a_{\alpha_{10}}^\dagger a_{\alpha_{13}}^\dagger \vert 0 \rangle ,
\end{equation*}
!et
in a more compact way as

!bt
\begin{equation*}
\Phi_{3,6,10,13} = |0001001000100100\rangle.
\end{equation*}
!et
The action of a creation operator is thus

!bt
\begin{equation*}
a^\dagger_{\alpha_4}\Phi_{3,6,10,13} = a^\dagger_{\alpha_4}|0001001000100100\rangle=a^\dagger_{\alpha_4}a_{\alpha_3}^\dagger a_{\alpha_6}^\dagger a_{\alpha_{10}}^\dagger a_{\alpha_{13}}^\dagger \vert 0 \rangle ,
\end{equation*}
!et
which becomes

!bt
\begin{equation*}
-a_{\alpha_3}^\dagger a^\dagger_{\alpha_4} a_{\alpha_6}^\dagger a_{\alpha_{10}}^\dagger a_{\alpha_{13}}^\dagger \vert 0 \rangle =-|0001101000100100\rangle.
\end{equation*}
!et
Similarly

!bt
\begin{equation*}
a^\dagger_{\alpha_6}\Phi_{3,6,10,13} = a^\dagger_{\alpha_6}|0001001000100100\rangle=a^\dagger_{\alpha_6}a_{\alpha_3}^\dagger a_{\alpha_6}^\dagger a_{\alpha_{10}}^\dagger a_{\alpha_{13}}^\dagger \vert 0 \rangle ,
\end{equation*}
!et
which becomes

!bt
\begin{equation*}
-a^\dagger_{\alpha_4} (a_{\alpha_6}^\dagger)^ 2 a_{\alpha_{10}}^\dagger a_{\alpha_{13}}^\dagger \vert 0 \rangle =0!
\end{equation*}
!et
This gives a simple recipe:  

  * If one of the bits $b_j$ is $1$ and we act with a creation operator on this bit, we return a null vector

  * If $b_j=0$, we set it to $1$ and return a sign factor $(-1)^l$, where $l$ is the number of bits set before bit $j$.


Consider the action of $a^\dagger_{\alpha_2}$ on various slater determinants:

!bt
\begin{equation*}
\begin{array}{ccc}
a^\dagger_{\alpha_2}\Phi_{00111}& = a^\dagger_{\alpha_2}|00111\rangle&=0\times |00111\rangle\\
a^\dagger_{\alpha_2}\Phi_{01011}& = a^\dagger_{\alpha_2}|01011\rangle&=(-1)\times |01111\rangle\\
a^\dagger_{\alpha_2}\Phi_{01101}& = a^\dagger_{\alpha_2}|01101\rangle&=0\times |01101\rangle\\
a^\dagger_{\alpha_2}\Phi_{01110}& = a^\dagger_{\alpha_2}|01110\rangle&=0\times |01110\rangle\\
a^\dagger_{\alpha_2}\Phi_{10011}& = a^\dagger_{\alpha_2}|10011\rangle&=(-1)\times |10111\rangle\\
a^\dagger_{\alpha_2}\Phi_{10101}& = a^\dagger_{\alpha_2}|10101\rangle&=0\times |10101\rangle\\
a^\dagger_{\alpha_2}\Phi_{10110}& = a^\dagger_{\alpha_2}|10110\rangle&=0\times |10110\rangle\\
a^\dagger_{\alpha_2}\Phi_{11001}& = a^\dagger_{\alpha_2}|11001\rangle&=(+1)\times |11101\rangle\\
a^\dagger_{\alpha_2}\Phi_{11010}& = a^\dagger_{\alpha_2}|11010\rangle&=(+1)\times |11110\rangle\\
\end{array}
\end{equation*}
!et
What is the simplest way to obtain the phase when we act with one annihilation(creation) operator
on the given Slater determinant representation?
We have an SD representation

!bt
\begin{equation*}
\Phi_{\Lambda} = a_{\alpha_0}^\dagger a_{\alpha_3}^\dagger a_{\alpha_6}^\dagger a_{\alpha_{10}}^\dagger a_{\alpha_{13}}^\dagger \vert 0 \rangle ,
\end{equation*}
!et
in a more compact way as

!bt
\begin{equation*}
\Phi_{0,3,6,10,13} = |1001001000100100\rangle.
\end{equation*}
!et
The action of

!bt
\begin{equation*}
a^\dagger_{\alpha_4}a_{\alpha_0}\Phi_{0,3,6,10,13} = a^\dagger_{\alpha_4}|0001001000100100\rangle=a^\dagger_{\alpha_4}a_{\alpha_3}^\dagger a_{\alpha_6}^\dagger a_{\alpha_{10}}^\dagger a_{\alpha_{13}}^\dagger \vert 0 \rangle ,
\end{equation*}
!et
which becomes

!bt
\begin{equation*}
-a_{\alpha_3}^\dagger a^\dagger_{\alpha_4} a_{\alpha_6}^\dagger a_{\alpha_{10}}^\dagger a_{\alpha_{13}}^\dagger \vert 0 \rangle =-|0001101000100100\rangle.
\end{equation*}
!et
The action

!bt
\begin{equation*}
a_{\alpha_0}\Phi_{0,3,6,10,13} = |0001001000100100\rangle,
\end{equation*}
!et
can be obtained by subtracting the logical sum (AND operation) of $\Phi_{0,3,6,10,13}$ and 
a word which represents only $\alpha_0$, that is

!bt
\begin{equation*}
|1000000000000000\rangle,
\end{equation*}
!et
 
from $\Phi_{0,3,6,10,13}= |1001001000100100\rangle$.

This operation gives $|0001001000100100\rangle$. 

Similarly, we can form $a^\dagger_{\alpha_4}a_{\alpha_0}\Phi_{0,3,6,10,13}$, say, by adding 
$|0000100000000000\rangle$ to $a_{\alpha_0}\Phi_{0,3,6,10,13}$, first checking that their logical sum
is zero in order to make sure that orbital $\alpha_4$ is not already occupied. 
It is trickier however to get the phase $(-1)^l$. 
One possibility is as follows

  * Let $S_1$ be a word that represents the $1-$bit to be removed and all others set to zero. In the previous example $S_1=|1000000000000000\rangle$

  * Define $S_2$ as the similar word that represents the bit to be added, that is in our case $S_2=|0000100000000000\rangle$.

  * Compute then $S=S_1-S_2$, which here becomes
!bt
\begin{equation*}
S=|0111000000000000\rangle
\end{equation*}
!et
  * Perform then the logical AND operation of $S$ with the word containing
!bt
\begin{equation*} 
\Phi_{0,3,6,10,13} = |1001001000100100\rangle,
\end{equation*}
!et
which results in $|0001000000000000\rangle$. Counting the number of $1-$bits gives the phase.  Here you need however an algorithm for bitcounting. Several efficient ones available. 

This algorithm is described in reference 2 below. It is also included in the file package for the final projects.



o B. A. Brown and W. A. Richter, Phys. Rev. C _74_,  034315 (2006).

o R. R. .Whitehead *et al.*, Adv. Nucl. Phys. _9_, 123 (1977).

o J. Dukelsky and S. Pittel, preprint arxiv 1204.2950


======= Appendix: USDB interaction =======

!bc cppcod
# number of single-particle states, only neutrons!!!!
    12
#   legend
#   index  n     l    2j   2m_j   single-particle energies
     1     1     0     1    -1   -3.20790
     2     1     0     1     1   -3.20790
     3     0     2     3    -3    2.11170
     4     0     2     3    -1    2.11170
     5     0     2     3     1    2.11170
     6     0     2     3     3    2.11170
     7     0     2     5    -5   -3.92570
     8     0     2     5    -3   -3.92570
     9     0     2     5    -1   -3.92570
    10     0     2     5     1   -3.92570
    11     0     2     5     3   -3.92570
    12     0     2     5     5   -3.92570
# number of matrix elements in m-scheme
   343
   1   2   1   2  -1.69130
   1   2   3   6  -0.71771
   1   2   4   5   0.71771
   1   2   7  12  -0.90078
   1   2   8  11   0.90078
   1   2   9  10  -0.90078
   1   3   1   3  -0.30340
   1   3   1   8   0.65855
   1   3   2   7  -1.47255
   1   3   3   4   0.34940
   1   3   3   9   0.14034
   1   3   4   8  -0.22917
   1   3   5   7   0.25622
   1   3   7  10   0.52984
   1   3   8   9  -0.71086
   1   4   1   4  -0.09860
   1   4   1   9   0.80655
   1   4   2   3  -0.35472
   1   4   2   8  -1.14063
   1   4   3   5   0.30259
   1   4   3  10   0.17721
   1   4   4   9  -0.16659
   1   4   5   8   0.03713
   1   4   6   7   0.20829
   1   4   7  11   0.64892
   1   4   8  10  -0.41042
   1   5   1   5   0.10620
   1   5   1  10   0.80655
   1   5   2   4  -0.40960
   1   5   2   9  -0.80655
   1   5   3   6   0.17470
   1   5   3  11   0.15746
   1   5   4   5   0.17470
   1   5   4  10  -0.05251
   1   5   5   9  -0.08783
   1   5   6   8   0.18630
   1   5   7  12   0.48368
   1   5   8  11   0.09674
   1   5   9  10  -0.38694
   1   6   1   6   0.31100
   1   6   1  11   0.65855
   1   6   2   5  -0.35472
   1   6   2  10  -0.46566
   1   6   3  12   0.08302
   1   6   4   6   0.17470
   1   6   4  11   0.05028
   1   6   5  10  -0.11658
   1   6   6   9   0.11408
   1   6   8  12   0.37466
   1   6   9  11  -0.23695
   1   7   1   7   0.68410
   1   7   3   8  -0.33834
   1   7   4   7   0.43679
   1   8   1   8   0.41333
   1   8   2   7   0.60545
   1   8   3   4  -0.12954
   1   8   3   9  -0.40520
   1   8   4   8   0.22489
   1   8   5   7   0.23691
   1   8   7  10  -0.22731
   1   8   8   9   0.30497
   1   9   1   9   0.14257
   1   9   2   3   0.46566
   1   9   2   8   0.76584
   1   9   3   5  -0.18319
   1   9   3  10  -0.40563
   1   9   4   9   0.04088
   1   9   5   8   0.26023
   1   9   6   7   0.05091
   1   9   7  11  -0.45462
   1   9   8  10   0.28753
   1  10   1  10  -0.12820
   1  10   2   4   0.80655
   1  10   2   9   0.81230
   1  10   3   6  -0.15865
   1  10   3  11  -0.35966
   1  10   4   5  -0.15865
   1  10   4  10  -0.11524
   1  10   5   9   0.23419
   1  10   6   8   0.06830
   1  10   7  12  -0.50828
   1  10   8  11  -0.10166
   1  10   9  10   0.40663
   1  11   1  11  -0.39897
   1  11   2   5   1.14063
   1  11   2  10   0.76584
   1  11   3  12  -0.26634
   1  11   4   6  -0.25907
   1  11   4  11  -0.24348
   1  11   5  10   0.18136
   1  11   6   9   0.06830
   1  11   8  12  -0.64293
   1  11   9  11   0.40663
   1  12   1  12  -0.66973
   1  12   2   6   1.47255
   1  12   2  11   0.60545
   1  12   4  12  -0.34384
   1  12   5   6  -0.28965
   1  12   5  11   0.11220
   1  12   6  10   0.05091
   1  12   9  12  -0.50828
   1  12  10  11   0.68193
   2   3   2   3   0.31100
   2   3   2   8  -0.65855
   2   3   3   5   0.17470
   2   3   3  10   0.11408
   2   3   4   9  -0.11658
   2   3   5   8   0.05028
   2   3   6   7   0.08302
   2   3   7  11   0.37466
   2   3   8  10  -0.23695
   2   4   2   4   0.10620
   2   4   2   9  -0.80655
   2   4   3   6   0.17470
   2   4   3  11   0.18630
   2   4   4   5   0.17470
   2   4   4  10  -0.08783
   2   4   5   9  -0.05251
   2   4   6   8   0.15746
   2   4   7  12   0.48368
   2   4   8  11   0.09674
   2   4   9  10  -0.38694
   2   5   2   5  -0.09860
   2   5   2  10  -0.80655
   2   5   3  12   0.20829
   2   5   4   6   0.30259
   2   5   4  11   0.03713
   2   5   5  10  -0.16659
   2   5   6   9   0.17721
   2   5   8  12   0.64892
   2   5   9  11  -0.41042
   2   6   2   6  -0.30340
   2   6   2  11  -0.65855
   2   6   4  12   0.25622
   2   6   5   6   0.34940
   2   6   5  11  -0.22917
   2   6   6  10   0.14034
   2   6   9  12   0.52984
   2   6  10  11  -0.71086
   2   7   2   7  -0.66973
   2   7   3   4   0.28965
   2   7   3   9  -0.05091
   2   7   4   8  -0.11220
   2   7   5   7   0.34384
   2   7   7  10   0.50828
   2   7   8   9  -0.68193
   2   8   2   8  -0.39897
   2   8   3   5   0.25907
   2   8   3  10  -0.06830
   2   8   4   9  -0.18136
   2   8   5   8   0.24348
   2   8   6   7   0.26634
   2   8   7  11   0.64293
   2   8   8  10  -0.40663
   2   9   2   9  -0.12820
   2   9   3   6   0.15865
   2   9   3  11  -0.06830
   2   9   4   5   0.15865
   2   9   4  10  -0.23419
   2   9   5   9   0.11524
   2   9   6   8   0.35966
   2   9   7  12   0.50828
   2   9   8  11   0.10166
   2   9   9  10  -0.40663
   2  10   2  10   0.14257
   2  10   3  12  -0.05091
   2  10   4   6   0.18319
   2  10   4  11  -0.26023
   2  10   5  10  -0.04088
   2  10   6   9   0.40563
   2  10   8  12   0.45462
   2  10   9  11  -0.28753
   2  11   2  11   0.41333
   2  11   4  12  -0.23691
   2  11   5   6   0.12954
   2  11   5  11  -0.22489
   2  11   6  10   0.40520
   2  11   9  12   0.22731
   2  11  10  11  -0.30497
   2  12   2  12   0.68410
   2  12   5  12  -0.43679
   2  12   6  11   0.33834
   3   4   3   4  -0.09740
   3   4   3   9  -0.19019
   3   4   4   8   0.31058
   3   4   5   7  -0.34724
   3   4   7  10  -0.72831
   3   4   8   9   0.97713
   3   5   3   5  -0.09740
   3   5   3  10  -0.28529
   3   5   4   9   0.27452
   3   5   5   8  -0.07765
   3   5   6   7  -0.30072
   3   5   7  11  -1.02999
   3   5   8  10   0.65142
   3   6   3   6  -0.99830
   3   6   3  11  -0.23294
   3   6   4   5   0.90090
   3   6   4  10   0.09510
   3   6   5   9   0.09510
   3   6   6   8  -0.23294
   3   6   7  12  -1.93145
   3   6   8  11   1.13362
   3   6   9  10  -0.73471
   3   7   3   7  -1.44470
   3   7   7   8  -1.33490
   3   8   3   8  -0.61520
   3   8   4   7  -1.07088
   3   8   7   9  -1.05533
   3   9   3   9  -0.15439
   3   9   4   8  -0.75251
   3   9   5   7  -0.67312
   3   9   7  10  -0.68790
   3   9   8   9  -0.41199
   3  10   3  10   0.07042
   3  10   4   9  -0.38938
   3  10   5   8  -0.57810
   3  10   6   7  -0.41957
   3  10   7  11  -0.40392
   3  10   8  10  -0.41199
   3  11   3  11   0.19190
   3  11   4   5  -0.23294
   3  11   4  10  -0.19838
   3  11   5   9  -0.25310
   3  11   6   8  -0.53072
   3  11   7  12  -0.20328
   3  11   8  11  -0.30764
   3  11   9  10  -0.10435
   3  12   3  12   0.34274
   3  12   4   6  -0.30072
   3  12   4  11  -0.19472
   3  12   5  10   0.05359
   3  12   6   9  -0.41957
   3  12   8  12  -0.20328
   3  12   9  11  -0.08250
   4   5   4   5  -0.99830
   4   5   4  10   0.09510
   4   5   5   9   0.09510
   4   5   6   8  -0.23294
   4   5   7  12   0.60173
   4   5   8  11  -1.39956
   4   5   9  10   1.79847
   4   6   4   6  -0.09740
   4   6   4  11  -0.07765
   4   6   5  10   0.27452
   4   6   6   9  -0.28529
   4   6   8  12  -1.02999
   4   6   9  11   0.65142
   4   7   4   7  -0.06220
   4   7   7   9  -0.81746
   4   8   4   8  -0.76886
   4   8   5   7  -0.13734
   4   8   7  10  -0.70456
   4   8   8   9  -0.68965
   4   9   4   9  -0.70880
   4   9   5   8  -0.73663
   4   9   6   7   0.05359
   4   9   7  11  -0.42372
   4   9   8  10  -0.88807
   4  10   4  10  -0.28005
   4  10   5   9  -0.98033
   4  10   6   8  -0.25310
   4  10   7  12  -0.18949
   4  10   8  11  -0.69186
   4  10   9  10  -0.50237
   4  11   4  11   0.11934
   4  11   5  10  -0.73663
   4  11   6   9  -0.57810
   4  11   8  12  -0.39716
   4  11   9  11  -0.56627
   4  12   4  12   0.09135
   4  12   5   6  -0.34724
   4  12   5  11  -0.13734
   4  12   6  10  -0.67312
   4  12   9  12  -0.43847
   4  12  10  11  -0.14289
   5   6   5   6  -0.09740
   5   6   5  11   0.31058
   5   6   6  10  -0.19019
   5   6   9  12  -0.72831
   5   6  10  11   0.97713
   5   7   5   7   0.09135
   5   7   7  10  -0.43847
   5   7   8   9  -0.14289
   5   8   5   8   0.11934
   5   8   6   7  -0.19472
   5   8   7  11  -0.39716
   5   8   8  10  -0.56627
   5   9   5   9  -0.28005
   5   9   6   8  -0.19838
   5   9   7  12  -0.18949
   5   9   8  11  -0.69186
   5   9   9  10  -0.50237
   5  10   5  10  -0.70880
   5  10   6   9  -0.38938
   5  10   8  12  -0.42372
   5  10   9  11  -0.88807
   5  11   5  11  -0.76886
   5  11   6  10  -0.75251
   5  11   9  12  -0.70456
   5  11  10  11  -0.68965
   5  12   5  12  -0.06220
   5  12   6  11  -1.07088
   5  12  10  12  -0.81746
   6   7   6   7   0.34274
   6   7   7  11  -0.20328
   6   7   8  10  -0.08250
   6   8   6   8   0.19190
   6   8   7  12  -0.20328
   6   8   8  11  -0.30764
   6   8   9  10  -0.10435
   6   9   6   9   0.07042
   6   9   8  12  -0.40392
   6   9   9  11  -0.41199
   6  10   6  10  -0.15439
   6  10   9  12  -0.68790
   6  10  10  11  -0.41199
   6  11   6  11  -0.61520
   6  11  10  12  -1.05533
   6  12   6  12  -1.44470
   6  12  11  12  -1.33490
   7   8   7   8  -0.20690
   7   9   7   9  -0.20690
   7  10   7  10  -0.49040
   7  10   8   9   0.38036
   7  11   7  11  -0.77390
   7  11   8  10   0.35860
   7  12   7  12  -1.46370
   7  12   8  11   0.68980
   7  12   9  10  -0.40630
   8   9   8   9  -0.71720
   8  10   8  10  -0.43370
   8  11   8  11  -1.01010
   8  11   9  10   0.85990
   8  12   8  12  -0.77390
   8  12   9  11   0.35860
   9  10   9  10  -1.29360
   9  11   9  11  -0.43370
   9  12   9  12  -0.49040
   9  12  10  11   0.38036
  10  11  10  11  -0.71720
  10  12  10  12  -0.20690
  11  12  11  12  -0.20690
!ec














